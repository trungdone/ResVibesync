"use client";

import { useEffect, useState } from "react";
import { useParams, useSearchParams } from "next/navigation";

import { fetchAlbumById, fetchAlbums } from "@/lib/api/albums";
import { fetchSongsByIds } from "@/lib/api/songs";
import { fetchArtistById } from "@/lib/api/artists";

export default function useAlbumDetail() {
  // L·∫•y `id` t·ª´ URL ƒë·ªông (v√≠ d·ª•: /album/[id])
  const params = useParams();
  const searchParams = useSearchParams();
  const id = String(params.id);

  // Ki·ªÉm tra xem c√≥ ƒë·∫øn t·ª´ m·ª•c "Other Albums" kh√¥ng
  const isFromOtherAlbums = searchParams.get("from") === "other";

  // Kh·ªüi t·∫°o c√°c state ch√≠nh
  const [album, setAlbum] = useState(null);              // Th√¥ng tin album ch√≠nh
  const [artist, setArtist] = useState(null);            // Ngh·ªá sƒ© c·ªßa album
  const [songs, setSongs] = useState([]);                // Danh s√°ch b√†i h√°t trong album
  const [artistAlbums, setArtistAlbums] = useState([]);  // Album kh√°c kh√¥ng c√πng ngh·ªá sƒ©

  const [loading, setLoading] = useState(true);          // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  const [error, setError] = useState(null);              // Th√¥ng b√°o l·ªói n·∫øu c√≥

  useEffect(() => {
    // H√†m b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt album
    async function loadAlbumData() {
      try {
        setLoading(true);

        // üëâ 1. L·∫•y th√¥ng tin album theo ID
        const albumData = await fetchAlbumById(id);
        if (!albumData) throw new Error("Album not found");
        setAlbum(albumData);

        // üëâ 2. L·∫•y th√¥ng tin ngh·ªá sƒ©
        const artistData = await fetchArtistById(albumData.artist_id);
        if (!artistData) throw new Error("Artist not found");
        setArtist(artistData);

        // üëâ 3. L·∫•y danh s√°ch b√†i h√°t trong album
        if (albumData.songs?.length > 0) {
          const songsData = await fetchSongsByIds(albumData.songs);
          setSongs(songsData);
        }

        // üëâ 4. L·∫•y c√°c album kh√°c KH√îNG c√πng ngh·ªá sƒ© (n·∫øu kh√¥ng ph·∫£i t·ª´ m·ª•c "other")
        if (!isFromOtherAlbums) {
          const albumsData = await fetchAlbums();
          const filtered = albumsData
            .filter((a) => a.artist_id !== albumData.artist_id)
            .slice(0, 4); // Gi·ªõi h·∫°n t·ªëi ƒëa 4 album

          setArtistAlbums(filtered);
        } else {
          setArtistAlbums([]); // N·∫øu ƒë·∫øn t·ª´ m·ª•c "Other", kh√¥ng c·∫ßn hi·ªÉn th·ªã th√™m
        }
      } catch (err) {
        // X·ª≠ l√Ω l·ªói n·∫øu c√≥
        setError(err?.message || "Unknown error");
      } finally {
        setLoading(false);
      }
    }

    // G·ªçi h√†m t·∫£i d·ªØ li·ªáu khi component mount ho·∫∑c `id` thay ƒë·ªïi
    loadAlbumData();
  }, [id, isFromOtherAlbums]);

  // Tr·∫£ ra c√°c d·ªØ li·ªáu ƒë·ªÉ s·ª≠ d·ª•ng trong component Album Page
  return {
    album,
    artist,
    songs,
    artistAlbums,
    loading,
    error,
    isFromOtherAlbums,
  };
}
